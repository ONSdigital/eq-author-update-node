// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/Popout should render content when open 1`] = `
<styled.div>
  <button
    aria-expanded={true}
    aria-haspopup={true}
    onClick={[Function]}
  >
    Click Me
  </button>
  <TransitionGroup
    childFactory={[Function]}
    component={
      {
        "$$typeof": Symbol(react.forward_ref),
        "_foldedDefaultProps": {
          "horizontalAlignment": "left",
          "offsetX": "0",
          "offsetY": "0",
          "verticalAlignment": "bottom",
        },
        "attrs": [],
        "componentStyle": e {
          "baseHash": -773662986,
          "baseStyle": undefined,
          "componentId": "sc-gsnTZi",
          "isStatic": false,
          "rules": [
            "
  position: absolute;
  ",
            [Function],
            ";
  ",
            [Function],
            ";
  z-index: 10;
",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": [],
        "propTypes": {
          "horizontalAlignment": [Function],
          "offsetX": [Function],
          "offsetY": [Function],
          "verticalAlignment": [Function],
        },
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "sc-gsnTZi",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
  >
    <DefaultTransition>
      <Content
        onClose={[Function]}
      />
    </DefaultTransition>
  </TransitionGroup>
</styled.div>
`;

exports[`components/Popout shouldn't render content when closed 1`] = `
<styled.div>
  <button
    aria-expanded={false}
    aria-haspopup={true}
    onClick={[Function]}
  >
    Click Me
  </button>
  <TransitionGroup
    childFactory={[Function]}
    component={
      {
        "$$typeof": Symbol(react.forward_ref),
        "_foldedDefaultProps": {
          "horizontalAlignment": "left",
          "offsetX": "0",
          "offsetY": "0",
          "verticalAlignment": "bottom",
        },
        "attrs": [],
        "componentStyle": e {
          "baseHash": -773662986,
          "baseStyle": undefined,
          "componentId": "sc-gsnTZi",
          "isStatic": false,
          "rules": [
            "
  position: absolute;
  ",
            [Function],
            ";
  ",
            [Function],
            ";
  z-index: 10;
",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": [],
        "propTypes": {
          "horizontalAlignment": [Function],
          "offsetX": [Function],
          "offsetY": [Function],
          "verticalAlignment": [Function],
        },
        "render": [Function],
        "shouldForwardProp": undefined,
        "styledComponentId": "sc-gsnTZi",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
  />
</styled.div>
`;
